apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.stackoverflowusers"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        all {
            buildConfigField("String", "API_ENDPOINT", "\"https://api.stackexchange.com\"")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$lifecycle_version"
    implementation "androidx.core:core-ktx:$lifecycle_version"
    implementation "androidx.recyclerview:recyclerview:$lifecycle_version"
    implementation "com.google.android.material:material:$material_version"
    // Extensions such as ViewModelProviders
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // Dagger
    // Note: I'm not going to use dagger-android since I don't think it contributes with a real
    // value to a project but adds another layer of complexity. Also, new features won't be
    // added to dagger-android (probably deprecated in a near future). Take a look to:
    // https://twitter.com/manuelvicnt/status/1188861226530607106
    api "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    // RxAndroid
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroid_version"
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation "io.reactivex.rxjava3:rxjava:$rxJava_version"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit_version"
    //Logging interceptor
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"
    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    testImplementation 'junit:junit:4.12'
    // Needed for testing LiveData
    testImplementation "android.arch.core:core-testing:1.1.1"
    // 'mockito-inline' artifact demanded by Kotlin
    testImplementation 'org.mockito:mockito-core:2.28.2'
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.1.0"

    //MockK
    testImplementation "io.mockk:mockk:1.11.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

// TODO: remove this workaround for @Generated does not exist https://github.com/google/dagger/issues/1449
if (project.hasProperty('kapt')) {
    // Reference for 'kapt' DSL: https://kotlinlang.org/docs/reference/kapt.html#java-compiler-options
    kapt {
        // we expect this closure to run over a org.jetbrains.kotlin.gradle.plugin.KaptExtension
        javacOptions {
            option("-source", "8")
            option("-target", "8")
        }
    }
}
